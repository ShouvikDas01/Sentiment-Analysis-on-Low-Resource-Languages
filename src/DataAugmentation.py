# -*- coding: utf-8 -*-
"""
Created on Fri Jan  5 22:48:57 2024

EXPLORING SENTIMENT ANALYSIS IN LOW RESOURCE LANGUAGE : 
    UNVEILING LIMITATIONS IN TRANSLATION LIBRARIES.

"This script augments text data for the negative class in th dataset to achieve a 
more balanced distribution of samples using Transformers GPT-NEO Model"

@author: shouvik das
Student ID: 22196026
"""

#Importing libraries
import pandas as pd
from transformers import pipeline
import numpy as np

df = pd.read_csv(r'data/english/covid.csv')

# Selecting only the negative class samples
negative_samples = df[df['experience'] == 1]

# Defining the augmentation factor to achieve the desired number of samples
desired_samples = 840
augmentation_factor = desired_samples // len(negative_samples) + 1

# Creating a function for augmentation using transformers
def augment_text_with_transformers(original_text):
    """Augments text using a text-generation pipeline from the Transformers library.

    Args:
      original_text (str): The original text to be augmented.
    
    Returns:
      list: A list of augmented text variations, generated by the language model.
    """

    generator = pipeline('text-generation', model='EleutherAI/gpt-neo-1.3B', max_length=100)
    augmented_texts = generator(original_text, max_length=100, num_return_sequences=augmentation_factor)
    return [result['generated_text'] for result in augmented_texts]

# Vectorized augmentation for all samples at once
original_texts = negative_samples['text'].values
augmented_texts = np.concatenate([augment_text_with_transformers(text) for text in original_texts])

# Randomly shuffling the augmented texts
np.random.shuffle(augmented_texts)

# Creating a DataFrame with the augmented negative class samples
df = pd.concat([df, pd.DataFrame({'text': augmented_texts[:desired_samples], 'experience': 1})], ignore_index=True)

# Shuffling the DataFrame to randomize the order
df = df.sample(frac=1).reset_index(drop=True)

df = pd.to_csv(r'data/augmented/covidaug.csv')